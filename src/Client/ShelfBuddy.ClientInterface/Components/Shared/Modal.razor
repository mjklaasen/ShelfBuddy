@if (_isVisible)
{
    <div class="modal-backdrop fade show"></div>
}

<div class="modal fade show d-block @(_isVisible ? "modal-visible" : "")" tabindex="-1" role="dialog" @onclick="CloseModal">
    <div class="modal-dialog" role="document" @onclick:stopPropagation="true">
        <div class="modal-content">
            @if (!string.IsNullOrWhiteSpace(Title))
            {
                <div class="modal-header">
                    <h5 class="modal-title">@Title</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
            }
            <div class="modal-body">
                @ChildContent
            </div>
            @if (ShowFooter)
            {
                <div class="modal-footer">
                    @if (ShowCancelButton)
                    {
                        <button type="button" class="btn btn-outline-secondary" @onclick="CloseModal">Cancel</button>
                    }
                    @if (!string.IsNullOrEmpty(ConfirmText))
                    {
                        <button type="button" class="btn @(IsDanger ? "btn-danger" : "btn-primary")" @onclick="OnConfirmClick">@ConfirmText</button>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public RenderFragment ChildContent { get; set; } = null!;
    [Parameter] public EventCallback OnConfirm { get; set; }
    [Parameter] public string ConfirmText { get; set; } = "";
    [Parameter] public bool ShowFooter { get; set; } = true;
    [Parameter] public bool ShowCancelButton { get; set; } = true;
    [Parameter] public bool IsDanger { get; set; }

    private bool _isVisible = false;

    public void Show()
    {
        _isVisible = true;
        StateHasChanged();
    }

    public void Close()
    {
        _isVisible = false;
        StateHasChanged();
    }

    private void CloseModal()
    {
        Close();
    }

    private async Task OnConfirmClick()
    {
        await OnConfirm.InvokeAsync();
        Close();
    }
}
