@using ShelfBuddy.ClientInterface.Services
@using ShelfBuddy.ClientInterface.Components.Shared
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject IInventoryStateService InventoryStateService
@inject ErrorHandlingService ErrorHandlingService
@inherits LayoutComponentBase

<AppErrorBoundary>
    <div class="app-shell">
        <main>
            <div class="status-bar">
                <div class="app-title">
                    <button class="menu-toggle" @onclick="ToggleMenu">
                        <i class="bi bi-list"></i>
                    </button>
                    <span>ShelfBuddy</span>
                </div>
                @if (_isAuthenticated)
                {
                    <div class="inventory-context">
                        <InventorySwitcher />
                    </div>
                }
            </div>

            <div class="content-container">
                @Body
            </div>
        </main>

        <div class="side-menu @(_navMenu.IsOpen ? "menu-open" : "")">
            <div class="menu-header">
                <span>Menu</span>
                <button class="menu-close" @onclick="ToggleMenu">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
            <div class="menu-items">
                <NavMenu @ref="_navMenu" OnLogout="LogoutAsync" />
            </div>
        </div>

        @if (_navMenu.IsOpen)
        {
            <div class="menu-overlay" @onclick="ToggleMenu"></div>
        }
    </div>

    <ErrorToast />
</AppErrorBoundary>

@code {
    private bool _isAuthenticated;
    private Guid? _userId;
    private NavMenu _navMenu = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CheckAuthStatusAsync();
        }
        catch (Exception ex)
        {
            ErrorHandlingService.ReportError(ex, "Error initializing main layout");
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
        }
    }

    private void ToggleMenu()
    {
        _navMenu.IsOpen = !_navMenu.IsOpen;
        StateHasChanged();
    }

    private async Task CheckAuthStatusAsync()
    {
        try
        {
            _isAuthenticated = await UserService.IsAuthenticatedAsync();
            if (_isAuthenticated)
            {
                var user = await UserService.GetCurrentUserAsync();
                _userId = user?.Id;

                if (_userId.HasValue && !InventoryStateService.HasActiveInventory)
                {
                    await InventoryStateService.LoadDefaultInventoryAsync(_userId.Value);
                }
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorHandlingService.ReportError(ex, "Error checking authentication status");
            Console.WriteLine($"Error in CheckAuthStatusAsync: {ex.Message}");
        }
    }

    private async Task LogoutAsync()
    {
        try
        {
            await InventoryStateService.SetCurrentInventoryAsync(null);
            await UserService.LogoutAsync();
            await CheckAuthStatusAsync();
        }
        catch (Exception ex)
        {
            ErrorHandlingService.ReportError(ex, "Error during logout");
            Console.WriteLine($"Error in LogoutAsync: {ex.Message}");
        }
    }
}
