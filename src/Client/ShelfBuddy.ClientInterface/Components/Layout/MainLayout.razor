@using ShelfBuddy.ClientInterface.Services
@using ShelfBuddy.ClientInterface.Components.Shared
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject IInventoryStateService InventoryStateService
@inherits LayoutComponentBase

<div class="app-shell">
    <main>
        <div class="status-bar">
            <div class="app-title">
                <button class="menu-toggle" @onclick="ToggleMenu">
                    <i class="bi bi-list"></i>
                </button>
                <span>ShelfBuddy</span>
            </div>
            @if (_isAuthenticated)
            {
                <div class="inventory-context">
                    <InventorySwitcher />
                </div>
            }
            <div class="user-section">
                @if (_isAuthenticated)
                {
                    <button class="icon-button" @onclick="LogoutAsync">
                        <i class="bi bi-box-arrow-right"></i>
                    </button>
                }
            </div>
        </div>

        <div class="content-container">
            @Body
        </div>
    </main>

    <div class="side-menu @(_navMenu.IsOpen ? "menu-open" : "")">
        <div class="menu-header">
            <span>Menu</span>
            <button class="menu-close" @onclick="ToggleMenu">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>
        <div class="menu-items">
            <NavMenu @ref="_navMenu" />
        </div>
    </div>

    @if (_navMenu.IsOpen)
    {
        <div class="menu-overlay" @onclick="ToggleMenu"></div>
    }
</div>

@code {
    private bool _isAuthenticated;
    private string _username = "";
    private Guid? _userId;
    private NavMenu _navMenu = new();

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthStatusAsync();
    }

    private void ToggleMenu()
    {
        _navMenu.IsOpen = !_navMenu.IsOpen;
        StateHasChanged();
    }

    private async Task CheckAuthStatusAsync()
    {
        _isAuthenticated = await UserService.IsAuthenticatedAsync();
        if (_isAuthenticated)
        {
            var user = await UserService.GetCurrentUserAsync();
            _username = user?.Username ?? "";
            _userId = user?.Id;

            if (_userId.HasValue && !InventoryStateService.HasActiveInventory)
            {
                await InventoryStateService.LoadDefaultInventoryAsync(_userId.Value);
            }
        }
        StateHasChanged();
    }

    private async Task LogoutAsync()
    {
        await InventoryStateService.SetCurrentInventoryAsync(null);

        await UserService.LogoutAsync();
        await CheckAuthStatusAsync();
        NavigationManager.NavigateTo("/login");
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }
}
